plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.9'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'checkstyle'
}

jar {
    enabled = false
}

group = 'com.webtoonchat'
version = '0.1.1'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    runtimeOnly 'com.mysql:mysql-connector-j'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-reactor-netty', version: '2.4.6'
    implementation 'org.springframework:spring-messaging:6.0.11'
    implementation 'org.springframework.security:spring-security-messaging:6.1.2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation('org.hibernate.validator:hibernate-validator:8.0.1.Final')
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation('org.glassfish:jakarta.el:3.0.2')
    //gson
    implementation 'com.google.code.gson:gson'

    //jwt
    implementation("io.jsonwebtoken:jjwt-api:0.11.5")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.5")
    implementation("io.jsonwebtoken:jjwt-jackson:0.11.5")
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    ignoreFailures = false // 분석결과 예외가 발생하면 빌드실패 발생시키는 것을 제외
    configFile file("${project.rootDir}/.idea/check-style/naver-checkstyle-rules.xml")
}

tasks.register('checkstyle', Checkstyle) {
    description 'Check code convention'
    group 'verification'
    configFile file("${project.rootDir}/.idea/check-style/naver-checkstyle-rules.xml")
    showViolations true
    classpath = files()
    ignoreFailures = false
    source "src/main/java"
}

tasks.register('copyGitHooks', Copy) {
    from("${rootDir}/git-hooks/") {
        include '**/*'
        rename '(.*)', '$1'
    }
    into "${rootDir}/.git/hooks"
}

tasks.register('installGitHooks', Exec) {
    group 'git hooks'
    workingDir rootDir
    commandLine 'chmod'
    args '-R', '+x', '.git/hooks/'
    dependsOn copyGitHooks
}